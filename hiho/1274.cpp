#include <cmath>
#include <cstdio>
#include <cstring>
#include <algorithm>
#define maxn 51
using namespace std;

int dp[maxn][maxn][maxn][3][3][3];
int ans[maxn][maxn][maxn];

int main()
{
    memset(dp, 0x7f, sizeof(dp));
    memset(ans, 0x7f, sizeof(ans));

    dp[1][1][0][0][1][0] = 2;
    dp[1][1][0][1][0][0] = 2;
    dp[0][1][1][1][2][0] = 2;
    dp[0][1][1][2][1][0] = 2;
    dp[1][0][1][0][2][0] = 2;
    dp[1][0][1][2][0][0] = 2;
    dp[2][0][0][0][0][0] = 2;
    dp[0][2][0][1][1][0] = 2;
    dp[0][0][2][2][2][0] = 2;

    ans[0][0][0] = 0;
    ans[1][0][0] = 1;
    ans[0][1][0] = 1;
    ans[0][0][1] = 1;

    for (int i = 0; i < maxn; ++i)
    {
        for (int j = 0; j < maxn; ++j)
        {
            for (int k = 0; k < maxn; ++k)
            {
                if (i > 0)
                {
                    dp[i][j][k][0][0][0] =  min(dp[i][j][k][0][0][0], 
                                            min(dp[i-1][j][k][0][0][0]+1, 
                                            min(dp[i-1][j][k][0][0][1]+1, 
                                            min(dp[i-1][j][k][0][1][1]+1, 
                                            min(dp[i-1][j][k][0][1][2]+1, 
                                                dp[i-1][j][k][0][2][2]+1)))));
                    dp[i][j][k][0][0][1] =  min(dp[i][j][k][0][0][1], 
                                            min(dp[i-1][j][k][0][1][0]+2, 
                                                dp[i-1][j][k][0][2][1]+2));

                    dp[i][j][k][0][1][0] =  min(dp[i][j][k][0][1][0], 
                                            min(dp[i-1][j][k][1][0][0]+1, 
                                            min(dp[i-1][j][k][1][0][1]+1, 
                                            min(dp[i-1][j][k][1][1][1]+1, 
                                            min(dp[i-1][j][k][1][1][2]+1, 
                                                dp[i-1][j][k][1][2][2]+1)))));
                    dp[i][j][k][0][1][1] =  min(dp[i][j][k][0][1][1], 
                                            min(dp[i-1][j][k][1][1][0]+2, 
                                                dp[i-1][j][k][1][2][1]+2));
                    dp[i][j][k][0][1][2] =  min(dp[i][j][k][0][1][2], 
                                                dp[i-1][j][k][1][2][0]+3);

                    dp[i][j][k][0][2][0] =  min(dp[i][j][k][0][2][0], 
                                            min(dp[i-1][j][k][2][0][0]+1, 
                                            min(dp[i-1][j][k][2][0][1]+1, 
                                            min(dp[i-1][j][k][2][1][1]+1, 
                                            min(dp[i-1][j][k][2][1][2]+1, 
                                                dp[i-1][j][k][2][2][2]+1)))));
                    dp[i][j][k][0][2][1] =  min(dp[i][j][k][0][2][1], 
                                            min(dp[i-1][j][k][2][1][0]+2, 
                                                dp[i-1][j][k][2][2][1]+2));
                    dp[i][j][k][0][2][2] =  min(dp[i][j][k][0][2][2], 
                                            min(dp[i-1][j][k][0][2][0]+2, 
                                                dp[i-1][j][k][2][2][0]+3));

                    dp[i][j][k][1][0][0] =  min(dp[i][j][k][1][0][0], 
                                                dp[i-1][j][k][1][0][2]);

                    dp[i][j][k][2][0][0] =  min(dp[i][j][k][2][0][0], 
                                                dp[i-1][j][k][2][0][2]);
                }

                if (j > 0)
                {
                    dp[i][j][k][1][0][0] =  min(dp[i][j][k][1][0][0], 
                                            min(dp[i][j-1][k][0][0][1]+1, 
                                            min(dp[i][j-1][k][0][1][1]+1, 
                                            min(dp[i][j-1][k][0][1][2]+1, 
                                                dp[i][j-1][k][0][2][2]+1))));
                    dp[i][j][k][1][0][1] =  min(dp[i][j][k][1][0][1], 
                                            min(dp[i][j-1][k][0][0][0]+2, 
                                            min(dp[i][j-1][k][0][1][0]+2, 
                                                dp[i][j-1][k][0][2][1]+2)));
                    dp[i][j][k][1][0][2] =  min(dp[i][j][k][1][0][2], 
                                                dp[i][j-1][k][0][2][0]+3);

                    dp[i][j][k][1][1][0] =  min(dp[i][j][k][1][1][0], 
                                            min(dp[i][j-1][k][1][0][1]+1, 
                                            min(dp[i][j-1][k][1][1][1]+1, 
                                            min(dp[i][j-1][k][1][1][2]+1, 
                                                dp[i][j-1][k][1][2][2]+1))));
                    dp[i][j][k][1][1][1] =  min(dp[i][j][k][1][1][1], 
                                            min(dp[i][j-1][k][1][0][0]+2, 
                                            min(dp[i][j-1][k][1][1][0]+2, 
                                                dp[i][j-1][k][1][2][1]+2)));
                    dp[i][j][k][1][1][2] =  min(dp[i][j][k][1][1][2], 
                                                dp[i][j-1][k][1][2][0]+3);

                    dp[i][j][k][1][2][0] =  min(dp[i][j][k][1][2][0], 
                                            min(dp[i][j-1][k][2][0][1]+1, 
                                            min(dp[i][j-1][k][2][1][1]+1, 
                                            min(dp[i][j-1][k][2][1][2]+1, 
                                                dp[i][j-1][k][2][2][2]+1))));
                    dp[i][j][k][1][2][1] =  min(dp[i][j][k][1][2][1], 
                                            min(dp[i][j-1][k][2][0][0]+2, 
                                            min(dp[i][j-1][k][2][1][0]+2, 
                                                dp[i][j-1][k][2][2][1]+2)));
                    dp[i][j][k][1][2][2] =  min(dp[i][j][k][1][2][2], 
                                                dp[i][j-1][k][2][2][0]+3);
                }

                if (k > 0)
                {
                    dp[i][j][k][2][0][0] =  min(dp[i][j][k][2][0][0], 
                                            min(dp[i][j][k-1][0][1][2]+1, 
                                                dp[i][j][k-1][0][2][2]+1));
                    dp[i][j][k][2][0][1] =  min(dp[i][j][k][2][0][1], 
                                            min(dp[i][j][k-1][0][0][1]+2, 
                                            min(dp[i][j][k-1][0][1][1]+2, 
                                                dp[i][j][k-1][0][2][1]+2)));
                    dp[i][j][k][2][0][2] =  min(dp[i][j][k][2][0][2], 
                                            min(dp[i][j][k-1][0][0][0]+3, 
                                            min(dp[i][j][k-1][0][1][0]+3, 
                                                dp[i][j][k-1][0][2][0]+3)));

                    dp[i][j][k][2][1][0] =  min(dp[i][j][k][2][1][0], 
                                            min(dp[i][j][k-1][1][1][2]+1, 
                                                dp[i][j][k-1][1][2][2]+1));
                    dp[i][j][k][2][1][1] =  min(dp[i][j][k][2][1][1], 
                                            min(dp[i][j][k-1][1][0][1]+2, 
                                            min(dp[i][j][k-1][1][1][1]+2, 
                                                dp[i][j][k-1][1][2][1]+2)));
                    dp[i][j][k][2][1][2] =  min(dp[i][j][k][2][1][2], 
                                            min(dp[i][j][k-1][1][0][0]+3, 
                                            min(dp[i][j][k-1][1][1][0]+3, 
                                                dp[i][j][k-1][1][2][0]+3)));

                    dp[i][j][k][2][2][0] =  min(dp[i][j][k][2][2][0], 
                                            min(dp[i][j][k-1][2][1][2]+1, 
                                                dp[i][j][k-1][2][2][2]+1));
                    dp[i][j][k][2][2][1] =  min(dp[i][j][k][2][2][1], 
                                            min(dp[i][j][k-1][2][0][1]+2, 
                                            min(dp[i][j][k-1][2][1][1]+2, 
                                                dp[i][j][k-1][2][2][1]+2)));
                    dp[i][j][k][2][2][2] =  min(dp[i][j][k][2][2][2], 
                                            min(dp[i][j][k-1][2][0][0]+3, 
                                            min(dp[i][j][k-1][2][1][0]+3, 
                                                dp[i][j][k-1][2][2][0]+3)));
                }
                for (int x = 0; x < 3; ++x)
                    for (int y = 0; y < 3; ++y)
                        for (int d = 0; d < 3; ++d)
                            ans[i][j][k] = min(ans[i][j][k], dp[i][j][k][x][y][d]);
            }
        }
    }

    int n, a, b, c;
    scanf("%d", &n);
    while(n--)
    {
        scanf("%d%d%d", &a, &b, &c);
        printf("%d\n", ans[a][b][c]);
    }
    return 0;
}
